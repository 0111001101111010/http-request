{"name":"http-request","tagline":"Java HTTP Request Library","body":"# Http Request [![Build Status](https://travis-ci.org/kevinsawicki/http-request.png)](https://travis-ci.org/kevinsawicki/http-request)\r\n\r\nA simple convenience library for using a [HttpURLConnection](http://download.oracle.com/javase/6/docs/api/java/net/HttpURLConnection.html)\r\nto make requests and access the response.\r\n\r\nThis library is available under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\r\n\r\n## Usage\r\n\r\nThe http-request library is available from [Maven Central](http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.github.kevinsawicki%22%20AND%20a%3A%22http-request%22).\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.github.kevinsawicki</groupId>\r\n  <artifactId>http-request</artifactId>\r\n  <version>5.5</version>\r\n</dependency>\r\n```\r\n\r\nJavadocs are available [here](http://kevinsawicki.github.com/http-request/apidocs/index.html).\r\n\r\n## FAQ\r\n\r\n### Who uses this?\r\n\r\nSee [here](https://github.com/kevinsawicki/http-request/wiki/Used-By) for a\r\nlist of known projects using this library.\r\n\r\n### Why was this written?\r\n\r\nThis library was written to make HTTP requests simple and easy when using a `HttpURLConnection`.\r\n\r\nLibraries like [Apache HttpComponents](http://hc.apache.org) are great but sometimes\r\nfor either simplicity, or perhaps for the environment you are deploying to (Android),\r\nyou just want to use a good old-fashioned `HttpURLConnection`.  This library seeks\r\nto add convenience and common patterns to the act of making HTTP requests such as\r\na fluid-interface for building requests and support for features such as multipart\r\nrequests.\r\n\r\n**Bottom line:** The single goal of this library is to improve the usability of the\r\n`HttpURLConnection` class.\r\n\r\n### What are the dependencies?\r\n\r\n**None**.  The goal of this library is to be a single class class with some inner static\r\nclasses.  The test project does require [Jetty](http://eclipse.org/jetty/) in order\r\nto test requests against an actual HTTP server implementation.\r\n\r\n### How are exceptions managed?\r\n\r\nThe `HttpRequest` class does not throw any checked exceptions, instead all low-level\r\nexceptions are wrapped up in a `HttpRequestException` which extends `RuntimeException`.\r\nYou can access the underlying exception by catching `HttpRequestException` and calling\r\n`getCause()` which will always return the original `IOException`.\r\n\r\n### Are requests asynchronous?\r\n\r\n**No**.  The underlying `HttpUrlConnection` object that each `HttpRequest`\r\nobject wraps has a synchronous API and therefore all methods on `HttpRequest`\r\nare also synchronous.\r\n\r\nTherefore it is important to not use an `HttpRequest` object on the main thread\r\nof your application.\r\n\r\nHere is a simple Android example of using it from an\r\n[AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html):\r\n\r\n```java\r\nprivate class DownloadTask extends AsyncTask<String, Long, File> {\r\n  protected File doInBackground(String... urls) {\r\n    try {\r\n      HttpRequest request =  HttpRequest.get(url[0]);\r\n      File file = null;\r\n      if (request.ok()) {\r\n        file = File.create(\"download\", \".tmp\");\r\n        request.receive(file);\r\n        publishProgress(file.length());\r\n      }\r\n      return file;\r\n    } catch (HttpRequestException exception) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  protected void onProgressUpdate(Long... progress) {\r\n    Log.d(\"MyApp\", \"Downloaded bytes: \" + progress[0]);\r\n  }\r\n\r\n  protected void onPostExecute(File file) {\r\n    if (file != null)\r\n      Log.d(\"MyApp\", \"Downloaded file to: \" + file.getAbsolutePath());\r\n    else\r\n      Log.d(\"MyApp\", \"Download failed\");\r\n  }\r\n}\r\n\r\nnew DownloadTask().execute(\"http://google.com\");\r\n```\r\n\r\n## Examples\r\n\r\n### Perform a GET request and get the status of the response\r\n\r\n```java\r\nint response = HttpRequest.get(\"http://google.com\").code();\r\n```\r\n\r\n### Perform a GET request and get the body of the response\r\n\r\n```java\r\nString response = HttpRequest.get(\"http://google.com\").body();\r\nSystem.out.println(\"Response was: \" + response);\r\n```\r\n\r\n### Print the response of a GET request to standard out\r\n\r\n```java\r\nHttpRequest.get(\"http://google.com\").receive(System.out);\r\n```\r\n\r\n### Adding query parameters\r\n\r\n```java\r\nHttpRequest request = HttpRequest.get(\"http://google.com\", true, 'q', \"baseball gloves\", \"size\", 100);\r\nSystem.out.println(request.toString()); // GET http://google.com?q=baseball%20gloves&size=100\r\n```\r\n\r\n### Working with request/response headers\r\n\r\n```java\r\nString contentType = HttpRequest.get(\"http://google.com\")\r\n                                .accept(\"application/json\") //Sets request header\r\n                                .contentType(); //Gets response header\r\nSystem.out.println(\"Response content type was \" + contentType);\r\n```\r\n\r\n### Perform a POST request with some data and get the status of the response\r\n\r\n```java\r\nint response = HttpRequest.post(\"http://google.com\").send(\"name=kevin\").code();\r\n```\r\n\r\n### Authenticate using Basic authentication\r\n\r\n```java\r\nint response = HttpRequest.get(\"http://google.com\").basic(\"username\", \"p4ssw0rd\").code();\r\n```\r\n\r\n### Perform a multipart POST request\r\n\r\n```java\r\nHttpRequest request = HttpRequest.post(\"http://google.com\");\r\nrequest.part(\"status[body]\", \"Making a multipart request\");\r\nrequest.part(\"status[image]\", new File(\"/home/kevin/Pictures/ide.png\"));\r\nif (request.ok())\r\n  System.out.println(\"Status was updated\");\r\n```\r\n\r\n### Perform a POST request with form data\r\n\r\n```java\r\nMap<String, String> data = new HashMap<String, String>();\r\ndata.put(\"user\", \"A User\");\r\ndata.put(\"state\", \"CA\");\r\nif (HttpRequest.post(\"http://google.com\").form(data).created())\r\n  System.out.println(\"User was created\");\r\n```\r\n\r\n### Copy body of response to a file\r\n\r\n```java\r\nFile output = new File(\"/output/request.out\");\r\nHttpRequest.get(\"http://google.com\").receive(output);\r\n```\r\n### Post contents of a file\r\n\r\n```java\r\nFile input = new File(\"/input/data.txt\");\r\nint response = HttpRequest.post(\"http://google.com\").send(input).code();\r\n```\r\n\r\n### Using entity tags for caching\r\n\r\n```java\r\nFile latest = new File(\"/data/cache.json\");\r\nHttpRequest request = HttpRequest.get(\"http://google.com\");\r\n//Copy response to file\r\nrequest.receive(latest);\r\n//Store eTag of response\r\nString eTag = request.eTag();\r\n//Later on check if changes exist\r\nboolean unchanged = HttpRequest.get(\"http://google.com\")\r\n                               .ifNoneMatch(eTag)\r\n                               .notModified();\r\n```\r\n\r\n### Using gzip compression\r\n\r\n```java\r\nHttpRequest request = HttpRequest.get(\"http://google.com\");\r\n//Tell server to gzip response and automatically uncompress\r\nrequest.acceptGzipEncoding().uncompress(true);\r\nString uncompressed = request.body();\r\nSystem.out.println(\"Uncompressed response is: \" + uncompressed);\r\n```\r\n\r\n### Ignoring security when using HTTPS\r\n\r\n```java\r\nHttpRequest request = HttpRequest.get(\"https://google.com\");\r\n//Accept all certificates\r\nrequest.trustAllCerts();\r\n//Accept all hostnames\r\nrequest.trustAllHosts();\r\n```\r\n\r\n### Configuring an HTTP proxy\r\n\r\n```java\r\nHttpRequest request = HttpRequest.get(\"https://google.com\");\r\n//Configure proxy\r\nrequest.useProxy(\"localhost\", 8080);\r\n//Optional proxy basic authentication\r\nrequest.proxyBasic(\"username\", \"p4ssw0rd\");\r\n```\r\n\r\n### Following redirects\r\n\r\n```java\r\nint code = HttpRequest.get(\"http://google.com\").followRedirects(true).code();\r\n```\r\n\r\n### Custom connection factory\r\n\r\nLooking to use this library with [OkHttp](https://github.com/square/okhttp)?\r\nRead [here](https://gist.github.com/JakeWharton/5797571).\r\n\r\n```java\r\nHttpRequest.setConnectionFactory(new ConnectionFactory() {\r\n\r\n  public HttpURLConnection create(URL url) throws IOException {\r\n    if (!\"https\".equals(url.getProtocol()))\r\n      throw new IOException(\"Only secure requests are allowed\");\r\n    return (HttpURLConnection) url.openConnection();\r\n  }\r\n\r\n  public HttpURLConnection create(URL url, Proxy proxy) throws IOException {\r\n    if (!\"https\".equals(url.getProtocol()))\r\n      throw new IOException(\"Only secure requests are allowed\");\r\n    return (HttpURLConnection) url.openConnection(proxy);\r\n  }\r\n});\r\n```\r\n\r\n## Contributors\r\n\r\n* [Kevin Sawicki](https://github.com/kevinsawicki) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=kevinsawicki)\r\n* [Eddie Ringle](https://github.com/eddieringle) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=eddieringle)\r\n* [Sean Jensen-Grey](https://github.com/seanjensengrey) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=seanjensengrey)\r\n* [Levi Notik](https://github.com/levinotik) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=levinotik)\r\n* [Michael Wang](https://github.com/michael-wang) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=michael-wang)\r\n* [Julien HENRY](https://github.com/henryju) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=henryju)\r\n* [Benoit Lubek](https://github.com/BoD) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=BoD)\r\n* [Jake Wharton](https://github.com/JakeWharton) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=JakeWharton)\r\n* [Oskar Hagberg](https://github.com/oskarhagberg) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=oskarhagberg)\r\n* [David Pate](https://github.com/DavidTPate) :: [contributions](https://github.com/kevinsawicki/http-request/commits?author=DavidTPate)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}